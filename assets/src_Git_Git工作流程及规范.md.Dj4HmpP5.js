import{_ as i,c as a,o as t,aF as l}from"./chunks/framework.C249IrdD.js";const E=JSON.parse('{"title":"Git工作流程及规范","description":"","frontmatter":{},"headers":[],"relativePath":"src/Git/Git工作流程及规范.md","filePath":"src/Git/Git工作流程及规范.md","lastUpdated":1742193340000}'),n={name:"src/Git/Git工作流程及规范.md"};function h(e,s,p,k,d,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="git工作流程及规范" tabindex="-1">Git工作流程及规范 <a class="header-anchor" href="#git工作流程及规范" aria-label="Permalink to &quot;Git工作流程及规范&quot;">​</a></h1><h2 id="基本使用流程" tabindex="-1">基本使用流程 <a class="header-anchor" href="#基本使用流程" aria-label="Permalink to &quot;基本使用流程&quot;">​</a></h2><p><code>新建分支-&gt;切换本地分支-&gt;进行开发-&gt;提交到feature-&gt;合并到develop-&gt;进行测试-&gt;合并到master</code></p><h2 id="分支概念" tabindex="-1">分支概念 <a class="header-anchor" href="#分支概念" aria-label="Permalink to &quot;分支概念&quot;">​</a></h2><p>分支是git中最重要的概念，分支可以理解为工作区，每个分支各自独立，在一个分支上修改代码时不会影响其他分支，在分支上我们可以做修改，提交，回退，合并等操作。 当我们要做某项工作时我们需要基于develop创建新分支，当工作完成时我们需要提交合并申请将修改提交到develop再由负责人合并到master分支。 举个例子： 假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。 现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。</p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><p><code>分支主要分为master、develop、feature、hotfix</code></p><ol><li>feature分支为功能分支，当我们需要开发新功能时我们要基于develop创建自己的feature分支，格式为feature/xxxx（功能描述）。 使用完毕后需要删除掉此分支。</li><li>develop分支为开发分支，当我们在feature分支开发完毕后要将代码提交到develop分支，develop的代码将发布到测试环境供测试人员测试。</li><li>master分支为项目的主分支，当develop分支的代码测试完成后会提交到master分支，master分支的代码为稳定版本供项目上线使用。</li><li>hotfix分支为补丁分支，当master上的代码出现bug时我们将基于master创建hotfix分支来修改紧急的bug，hotfix分支的格式为hotfix/xxxx(功能描述)，使用完毕后需要删除掉此分支。</li></ol><h2 id="git常用指令" tabindex="-1">Git常用指令 <a class="header-anchor" href="#git常用指令" aria-label="Permalink to &quot;Git常用指令&quot;">​</a></h2><ol><li><code>add</code> 将文件添加/移除暂存区</li></ol><p><strong>add 前一定要<code>git diff .</code>检查一下自己的修改</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add 文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add .  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代表将全部修改加入暂存区；</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout 文件路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout . </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 代表将修改全部移除暂存区；</span></span></code></pre></div><ol start="2"><li><code>commit</code> 将暂存区的文件修改记做一次提交并保存在本地分支</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;xxx&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 保存一次提交</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n第几次提交 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看指定提交的具体提交内容；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n第几次提交 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stat </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 查看指定提交的提交内容列表</span></span></code></pre></div><ol start="3"><li><code>pull</code> 拉取远程分支的代码</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git pull origin xxx  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 拉取指定远程分支代码，(git pull)不指定具体分支时拉取本地分支对应的远程分支</span></span></code></pre></div><blockquote><p>如果是多人协作开发，拉取代码的时候可能会产生冲突，这时需要解决冲突 再次提交解决冲突后的最新代码，<code>即以下操作</code></p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git add . </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git commit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;解决冲突&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push origin xxx </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将当前本地分支的修改推送到远程分支</span></span></code></pre></div><ol start="4"><li><code>push</code> 推送本地分支修改至远程分支</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push origin xxx </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将当前本地分支的修改推送到远程分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git push </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为强制提交 如果本地分支落后于远程分支使用 git push -f 会覆盖掉远程分支的提交。慎用!</span></span></code></pre></div><ol start="5"><li><code>checkout</code> 切换分支及创建新分支</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;分支名&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 切换分支；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;分支名&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">远程分支名 </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建分支并关联远程分支；</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git checkout . </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将修改移除暂存区</span></span></code></pre></div><blockquote><p>想要切换分支，vscode编辑器同样可以操作-----左下角源代码管理，点击可以切换分支及创建新分支</p></blockquote><ol start="6"><li><code>reset</code> 回退版本 及 回退已经加入暂存区的文件</li></ol><p>如果你想回到上一次commit的版本可以<code>git reset --hard</code>， 如果想要回到指定版本可以<code>git reset --hard &quot;版本哈希值&quot;</code>， 在回退版本时加 -- hard是将代码完全恢复到指定的版本，也就是说当前的修改将消失，如果不加-- hard的话你的修改也会被带到恢复的版本。</p><ol start="7"><li><code>branch</code> 列出分支/创建分支/删除分支</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列出本地所有分支,当前分支会被星号标示出。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//可以看见每一个分支的最后一次提交。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;分支名&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的)。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;分支名&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 删除一个分支</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git branch </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">D</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;分支名&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 强制删除一个分支</span></span></code></pre></div><ol start="8"><li><code>log</code> 查看一个分支的历史提交记录</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oneline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">number  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//每条log只显示一行,显示number条.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oneline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">graph  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以图形化地表示出分支合并历史.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;分支名&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可以显示特定分支的log.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">oneline branch1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">branch2  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">decorate  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//会显示出tag信息.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[author name]  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以指定作者的提交历史.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">git log </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">since </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">before </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">until </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">after  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据提交时间筛选log</span></span></code></pre></div>`,29)]))}const o=i(n,[["render",h]]);export{E as __pageData,o as default};
