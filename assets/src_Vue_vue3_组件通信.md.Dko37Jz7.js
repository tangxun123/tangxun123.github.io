import{_ as e,c as r,o as t,aF as o}from"./chunks/framework.C249IrdD.js";const _=JSON.parse('{"title":"Vue3 组件通信方式","description":"","frontmatter":{},"headers":[],"relativePath":"src/Vue/vue3/组件通信.md","filePath":"src/Vue/vue3/组件通信.md","lastUpdated":null}'),i={name:"src/Vue/vue3/组件通信.md"};function l(s,a,h,n,d,p){return t(),r("div",null,a[0]||(a[0]=[o('<h1 id="vue3-组件通信方式" tabindex="-1">Vue3 组件通信方式 <a class="header-anchor" href="#vue3-组件通信方式" aria-label="Permalink to &quot;Vue3 组件通信方式&quot;">​</a></h1><h2 id="_1-props-emits" tabindex="-1">1. props / emits <a class="header-anchor" href="#_1-props-emits" aria-label="Permalink to &quot;1. props / emits&quot;">​</a></h2><p>父组件通过 props 向子组件传递数据,子组件通过 emits 触发事件向父组件传递数据。</p><h2 id="_2-v-model" tabindex="-1">2. v-model <a class="header-anchor" href="#_2-v-model" aria-label="Permalink to &quot;2. v-model&quot;">​</a></h2><p>v-model 可以实现父子组件的双向数据绑定。</p><h2 id="_3-provide-inject" tabindex="-1">3. provide / inject <a class="header-anchor" href="#_3-provide-inject" aria-label="Permalink to &quot;3. provide / inject&quot;">​</a></h2><p>provide 和 inject 用于跨层级组件通信。provide 在祖先组件中提供数据,inject 在后代组件中注入数据。</p><h2 id="_4-ref-expose" tabindex="-1">4. ref / expose <a class="header-anchor" href="#_4-ref-expose" aria-label="Permalink to &quot;4. ref / expose&quot;">​</a></h2><p>通过 ref 获取子组件实例,子组件通过 defineExpose 暴露属性和方法给父组件使用。</p><h2 id="_5-事件总线" tabindex="-1">5. 事件总线 <a class="header-anchor" href="#_5-事件总线" aria-label="Permalink to &quot;5. 事件总线&quot;">​</a></h2><p>使用第三方库如 mitt 实现事件总线,实现任意组件间的通信。</p><h2 id="_6-状态管理" tabindex="-1">6. 状态管理 <a class="header-anchor" href="#_6-状态管理" aria-label="Permalink to &quot;6. 状态管理&quot;">​</a></h2><p>使用 Vuex/Pinia 等状态管理库实现组件间的数据共享。</p><h2 id="_7-attrs-listeners" tabindex="-1">7. attrs / listeners <a class="header-anchor" href="#_7-attrs-listeners" aria-label="Permalink to &quot;7. attrs / listeners&quot;">​</a></h2><p>attrs 包含父组件传递的非 props 属性,listeners 包含父组件传递的事件监听器。</p><h2 id="_8-slot" tabindex="-1">8. slot <a class="header-anchor" href="#_8-slot" aria-label="Permalink to &quot;8. slot&quot;">​</a></h2><p>通过插槽将父组件的内容传递到子组件的指定位置。</p><h2 id="_9-依赖注入" tabindex="-1">9. 依赖注入 <a class="header-anchor" href="#_9-依赖注入" aria-label="Permalink to &quot;9. 依赖注入&quot;">​</a></h2><p>使用 Vue3 的依赖注入功能,可以在组件树中共享数据和方法。</p><h2 id="_10-全局属性" tabindex="-1">10. 全局属性 <a class="header-anchor" href="#_10-全局属性" aria-label="Permalink to &quot;10. 全局属性&quot;">​</a></h2><p>通过 app.config.globalProperties 定义全局属性,所有组件都可以访问。</p><h2 id="_11-状态驱动的动态组件" tabindex="-1">11. 状态驱动的动态组件 <a class="header-anchor" href="#_11-状态驱动的动态组件" aria-label="Permalink to &quot;11. 状态驱动的动态组件&quot;">​</a></h2><p>使用 component 动态组件和 is 属性,根据状态动态切换组件并传递数据。</p><h2 id="_12-跨组件层级的状态共享" tabindex="-1">12. 跨组件层级的状态共享 <a class="header-anchor" href="#_12-跨组件层级的状态共享" aria-label="Permalink to &quot;12. 跨组件层级的状态共享&quot;">​</a></h2><p>使用 Composition API 的 reactive() 和 ref() 创建响应式状态,通过组合式函数在组件间共享。</p><h2 id="_13-组件实例方法" tabindex="-1">13. 组件实例方法 <a class="header-anchor" href="#_13-组件实例方法" aria-label="Permalink to &quot;13. 组件实例方法&quot;">​</a></h2><p>通过组件实例方法如 $parent、$root 等访问父组件或根组件实例。</p><h2 id="_14-自定义指令" tabindex="-1">14. 自定义指令 <a class="header-anchor" href="#_14-自定义指令" aria-label="Permalink to &quot;14. 自定义指令&quot;">​</a></h2><p>通过自定义指令在组件间共享可复用的指令逻辑。</p><h2 id="_15-组合式函数" tabindex="-1">15. 组合式函数 <a class="header-anchor" href="#_15-组合式函数" aria-label="Permalink to &quot;15. 组合式函数&quot;">​</a></h2><p>使用组合式函数(Composables)封装和共享组件间的状态逻辑。</p><h2 id="_16-跨组件层级的事件通信" tabindex="-1">16. 跨组件层级的事件通信 <a class="header-anchor" href="#_16-跨组件层级的事件通信" aria-label="Permalink to &quot;16. 跨组件层级的事件通信&quot;">​</a></h2><p>使用 Vue3 的 emits 选项和 emit 方法,可以实现跨多层组件的事件通信。</p><h2 id="_17-组件间的数据共享" tabindex="-1">17. 组件间的数据共享 <a class="header-anchor" href="#_17-组件间的数据共享" aria-label="Permalink to &quot;17. 组件间的数据共享&quot;">​</a></h2><p>使用 Vue3 的 shallowRef 和 shallowReactive 可以在组件间共享数据的浅层响应。</p><h2 id="_18-异步组件通信" tabindex="-1">18. 异步组件通信 <a class="header-anchor" href="#_18-异步组件通信" aria-label="Permalink to &quot;18. 异步组件通信&quot;">​</a></h2><p>使用 async/await 和 Suspense 组件实现异步组件间的数据传递。</p><h2 id="_19-组件实例属性" tabindex="-1">19. 组件实例属性 <a class="header-anchor" href="#_19-组件实例属性" aria-label="Permalink to &quot;19. 组件实例属性&quot;">​</a></h2><p>通过组件实例的 $attrs、$slots、$refs 等属性实现组件间的数据访问。</p><h2 id="_20-响应式数据共享" tabindex="-1">20. 响应式数据共享 <a class="header-anchor" href="#_20-响应式数据共享" aria-label="Permalink to &quot;20. 响应式数据共享&quot;">​</a></h2><p>使用 toRef 和 toRefs 将响应式数据转换为独立的响应式引用,便于在组件间共享。</p>',41)]))}const u=e(i,[["render",l]]);export{_ as __pageData,u as default};
